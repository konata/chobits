(do
  ;; normal function defination
  (def max
    (lambda (x y)
      (if (> x y) x y)
    ))

  (trace
    (max 100 200))

  ;; list operations
  (def cddr
    (lambda (list)
      (cdr (cdr list))
    )
  )

  (def cdddr
    (lambda (list)
      (cdr (cddr list))))

  (def cddddr
    (lambda (list)
      (cdr (cdddr list))))

  (def cdar
    (lambda (list)
      (car (cdr list))))

  (def names (cons 100 (cons 200 (cons 300 (cons 400 nil)))))
  (trace names)
  (trace (cddddr names))
  (trace (cdar names))

  ;; recursive function defination
  (def fact (lambda (x)
    (if (< x 1) 1 (* x (fact (- x 1))))))
  (trace (fact 10))

  ;; hanoi
  (def hanoi (lambda (remain left middle right)
    (if (eq remain 1)
      (trace left "->" right)
      (do
        (hanoi (- remain 1) left right middle)
        (trace left "->" right)
        (hanoi (- remain 1) middle left right)
      ))))
  (hanoi 10 "left" "middle" "right")

  ;; cond test code functions
  (trace  (cond
    ((> 1 1) (+ 1 1))
    ((> 1 2) (+ 2 1))
    ((> 2 1) (+ 3 1))
  ))

  ;; map   
  (def mapr (lambda (fn lst collector)
    (cond
      ((nil? lst) collector)
      ((eq 1 1) (mapr fn (cdr lst) (cons (fn (car lst)) collector))))))
  (def map (lambda (fn lst)
    (mapr fn lst nil)))

  ;; testcase
  (trace (map
    (lambda (x) (+ 100 x))
    (cons 1 (cons 2 (cons 3 (cons 4 (cons 5 nil)))))))

  (trace (map 
    (lambda (x)  
      (def x (+ x 100))
      (+ x 102)
      )
    (cons 1 (cons 2 (cons 3 (cons 4 nil))))
   ))

  (def filterr (lambda (fn lst collector)
    (trace lst)
    (if (nil? lst) 
        collector 
        (if (fn (car lst)) 
         (filterr fn (cdr lst) (cons (car lst) collector))
         (filterr fn (cdr lst) collector)
         ))
  ))

  (def filter (lambda (fn lst)
    (filterr fn lst nil)
  ))

  (def l (cons 30 (cons 29 (cons 31 (cons 28 nil)))))
  (trace (filter (lambda (x) (> x 30)) l))
)
